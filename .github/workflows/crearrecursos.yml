name: AWS Glue and Terraform Setup

on: [push]

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Checkout code
      uses: actions/checkout@v2  # Añadir este paso para descargar el código

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli  # Instala AWS CLI

    - name: Install Python and Boto3
      run: |
        sudo apt-get install -y python3 python3-pip  # Instala Python y pip
        pip3 install boto3  # Instala Boto3, la librería de AWS para Python

    - name: Install dependencies from requirements.txt
      run: |
        cd artefactos  # Navega a la carpeta de artefactos
        pip3 install -r requirements.txt  # Instala dependencias de Python desde requirements.txt



        



        
    - name: Execute SQL to CSV script
      run: |
        cd artefactos
        python3 sqlcsv.py  # Ejecuta el script que convierte los archivos SQL en CSV

    - name: Zip Lambda function and CSV
      run: |
        cd artefactos
        zip lambda_function.zip s3bucket.py datos_combinados.csv  # Crea un archivo zip con el código Lambda y los datos

    - name: ------------------------
      run: |
        echo "Esperando 1 segundo antes de destruir los recursos..."
        sleep 1  # Espera de 1 segundo

    - name: Empty the S3 Bucket if it has content
      run: |
        # Verifica si el bucket tiene objetos y, si los tiene, los elimina
        if aws s3 ls s3://netuptinteligencianegocios --recursive | grep -q .; then
          echo "El bucket tiene contenido. Eliminando los archivos..."
          aws s3 rm s3://netuptinteligencianegocios --recursive
        else
          echo "El bucket está vacío. No es necesario eliminar contenido."
        fi

    - name: Initialize and Destroy Terraform Resources
      run: |
        cd infra
        terraform init  # Inicializa Terraform
        terraform destroy --auto-approve  # Destruye los recursos creados por Terraform
    
        # Eliminar el archivo terraform.tfstate
        rm -f terraform.tfstate  # Elimina el archivo terraform.tfstate
    
        # Hacer commit de la eliminación del archivo terraform.tfstate
        git config --global user.name "AlbertApaza"
        git config --global user.email "aa2021071075@virtual.upt.pe"
        git add terraform.tfstate
        git commit -m "Eliminado terraform.tfstate después de destruir los recursos"
        git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} HEAD:main  # Realiza el push con el PAT (Personal Access Token)
    
    



    - name: Set up Terraform
      run: |
        cd infra
        terraform init  # Inicializa Terraform
        terraform apply --auto-approve  # Aplica la configuración de Terraform para crear los recursos

    - name: Copy Terraform State to Current Directory
      run: |
        cp infra/terraform.tfstate ./  # Copia el archivo terraform.tfstate al directorio actual

    - name: Commit Terraform State to GitHub
      run: |
        git config --global user.name "AlbertApaza"
        git config --global user.email "aa2021071075@virtual.upt.pe"
        git add terraform.tfstate
        git commit -m "Update terraform state"
        git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} HEAD:main  # Usa el PAT para autenticar el push

    - name: Invoke Lambda function to upload to S3
      run: |
        aws lambda invoke --function-name s3-upload-function --payload '{}' output.txt  # Invoca la función Lambda para cargar el archivo en S3

    - name: Start Glue Crawler
      run: |
        aws glue start-crawler --name netuptinteligencianegocios-crawler  # Inicia el Crawler de Glue

    - name: Wait for Crawler to Finish
      run: |
        sleep 150  # Espera de 2 minutos para permitir que el Crawler termine

    - name: Get Table from Glue
      run: |
        aws glue get-table --database-name tb_redupt_database --name netuptinteligencianegocios  # Obtiene la tabla de Glue después de que el Crawler haya terminado

